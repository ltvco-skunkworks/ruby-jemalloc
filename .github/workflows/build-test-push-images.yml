name: "Build Test and Push Docker Images"

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab
  # schedule:
  #   - cron: '0 14 * * 1'  # Runs every Monday at 10:00 AM EDT

jobs:
  define_jobs:
    name: Define Jobs
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.generate-jobs.outputs.jobs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate jobs
        id: generate-jobs
        run: |
          jobs=$(jq -c '
            ["bookworm", "slim-bookworm", "alpine3.20"] as $target_variants |
            to_entries[] |
            select(.key | test("^\\d+\\.\\d+$")) | # Exclude preview versions like `3.4-rc`
            select(.value != null) | # Exclude empty versions
            .value.variants[] as $variant |
            select($target_variants | index($variant) != null) | # Only include target variants
            {
              minor_version: .key,
              patch_version: .value.version,
              variant: $variant
            }
          ' versions.json | jq -s '.')
          echo "jobs=$(echo $jobs | jq -c)" >> "$GITHUB_OUTPUT"

  build_test_push:
    name: "Build Test and Push Ruby ${{ matrix.patch_version}} for ${{ matrix.variant }}"
    needs: define_jobs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.define_jobs.outputs.jobs) }}
    env:
      PATCH_VERSION_VARIANT_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.patch_version }}-${{ matrix.variant }}-jemalloc
      MINOR_VERSION_VARIANT_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.minor_version }}-${{ matrix.variant }}-jemalloc
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Ref: https://docs.docker.com/build/ci/github-actions/test-before-push/
      - name: Build and export to local Docker cache
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.minor_version }}/${{ matrix.variant }}
          load: true # Load the image into the local Docker cache for testing
          tags: ${{ env.PATCH_VERSION_VARIANT_TAG }}

      - name: Run Ruby smoke test
        run: |
          expected_output="Hello World!"
          actual_output=$(docker run --rm ${{ env.PATCH_VERSION_VARIANT_TAG }} ruby -e 'puts "Hello World!"')
          echo "$actual_output"
          if [ "$actual_output" != "$expected_output" ]; then
            echo "Failure: expected \"$expected_output\", got \"$actual_output\""
            exit 1
          fi

      - name: Run Jemalloc build config smoke test
        run: |
          expected_output="Jemalloc enabled"
          actual_output=$(docker run --rm ${{ env.PATCH_VERSION_VARIANT_TAG }} ruby -e 'puts RbConfig::CONFIG["MAINLIBS"].include?("jemalloc") ? "Jemalloc enabled" : "Jemalloc missing"')
          echo "$actual_output"
          if [ "$actual_output" != "$expected_output" ]; then
            echo "Failure: expected \"$expected_output\", got \"$actual_output\""
            exit 1
          fi

      - name: Run Jemalloc runtime stats smoke test
        run: |
          expected_output_pattern="jemalloc statistics"
          actual_output=$(docker run --rm -e MALLOC_CONF=stats_print:true ${{ env.PATCH_VERSION_VARIANT_TAG }} ruby -e 'exit' 2>&1)
          echo "$actual_output"
          if ! echo "$actual_output" | grep -q "$expected_output_pattern"; then
            echo "Failure: expected output to contain \"$expected_output_pattern\""
            exit 1
          fi

      - name: Determine additional image tags
        run: |
          if [[ "${{ matrix.variant }}" == alpine* ]]; then
            PATCH_VERSION_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.patch_version }}-alpine-jemalloc"
            MINOR_VERSION_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.minor_version }}-alpine-jemalloc"
          elif [[ "${{ matrix.variant }}" == slim* ]]; then
            PATCH_VERSION_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.patch_version }}-slim-jemalloc"
            MINOR_VERSION_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.minor_version }}-slim-jemalloc"
          else
            PATCH_VERSION_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.patch_version }}-jemalloc"
            MINOR_VERSION_TAG="${{ secrets.DOCKERHUB_USERNAME }}/ruby:${{ matrix.minor_version }}-jemalloc"
          fi

          echo "PATCH_VERSION_TAG=$PATCH_VERSION_TAG" >> $GITHUB_ENV
          echo "MINOR_VERSION_TAG=$MINOR_VERSION_TAG" >> $GITHUB_ENV

      # Comment out below to skip the time-intensive multi-arch build and push
      # - name: Build multi-platform and push to DockerHub
        # uses: docker/build-push-action@v6
        # with:
          # context: ${{ matrix.minor_version }}/${{ matrix.variant }}
          # platforms: linux/amd64,linux/arm64
          # push: true
          # tags: |
            # ${{ env.PATCH_VERSION_VARIANT_TAG }}
            # ${{ env.MINOR_VERSION_VARIANT_TAG }}
            # ${{ env.PATCH_VERSION_TAG }}
            # ${{ env.MINOR_VERSION_TAG }}
