name: "Build Test and Push Docker Images"

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab
  # TODO: Enable the schedule for automated weekly builds
  # schedule:
    # - cron: '0 13 * * 1'  # 9:00 AM EDT on Monday

jobs:
  define_matrix:
    name: Define matrix strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate matrix
        id: generate-matrix
        run: |
          matrix=$(jq -c '
            ["bookworm", "slim-bookworm", "alpine3.20"] as $supported_variants | # Define supported variants
            to_entries[] | # Convert `versions.json` object to an array of key-value pairs
            select(.key | test("^\\d+\\.\\d+$")) | # Exclude preview Ruby versions (ex: `3.x-rc`)
            select(.value != null) | # Exclude undefined Ruby versions (ex: `"3.x": null`)
            .value.variants[] as $variant | # Iterate over the variants of the remaining Ruby versions
            select($supported_variants | index($variant) != null) | # Include the variant if supported
            {
              minor_version: .key,
              patch_version: .value.version,
              variant: $variant
            }
          ' versions.json | jq -s '.')
          echo "matrix=$(echo $matrix | jq -c)" >> "$GITHUB_OUTPUT"

  build_test_push:
    name: "Ruby ${{ matrix.patch_version}} (${{ matrix.variant }}): Build, Test, Push"
    needs: define_matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include: ${{ fromJson(needs.define_matrix.outputs.matrix) }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }} # `ltvco/ruby-jemalloc`
      MINOR_VERSION_VARIANT_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.minor_version }}-${{ matrix.variant }} # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3-bookworm`
      PATCH_VERSION_VARIANT_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.patch_version }}-${{ matrix.variant }} # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3.6-bookworm`
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Ref: https://docs.docker.com/build/ci/github-actions/test-before-push/
      - name: Build and export to local Docker cache
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.minor_version }}/${{ matrix.variant }}
          load: true # Load the image into the local Docker cache for testing
          tags: ${{ env.PATCH_VERSION_VARIANT_TAG }}

      - name: Verify Ruby installation
        run: |
          expected_output="Hello World!"
          actual_output=$(docker run --rm ${{ env.PATCH_VERSION_VARIANT_TAG }} ruby -e 'puts "Hello World!"')
          echo "$actual_output"
          if [ "$actual_output" != "$expected_output" ]; then
            echo "Failure for Ruby ${{ matrix.patch_version }} on ${{ matrix.variant }}: expected \"$expected_output\", got \"$actual_output\""
            exit 1
          fi

      - name: Verify Jemalloc in Ruby build configuration
        run: |
          expected_output="Jemalloc enabled"
          actual_output=$(docker run --rm ${{ env.PATCH_VERSION_VARIANT_TAG }} ruby -e 'puts RbConfig::CONFIG["MAINLIBS"].include?("jemalloc") ? "Jemalloc enabled" : "Jemalloc missing"')
          echo "$actual_output"
          if [ "$actual_output" != "$expected_output" ]; then
            echo "Failure for Ruby ${{ matrix.patch_version }} on ${{ matrix.variant }}: expected \"$expected_output\", got \"$actual_output\""
            exit 1
          fi

      - name: Verify Jemalloc runtime statistics
        run: |
          expected_output_pattern="jemalloc statistics"
          actual_output=$(docker run --rm -e MALLOC_CONF=stats_print:true ${{ env.PATCH_VERSION_VARIANT_TAG }} ruby -e 'exit' 2>&1)
          echo "$actual_output"
          if ! grep -q "$expected_output_pattern" <<< "$actual_output"; then
            echo "Failure for Ruby ${{ matrix.patch_version }} on ${{ matrix.variant }}: expected output to contain \"$expected_output_pattern\""
            exit 1
          fi

      - name: Determine base variant tags
        run: |
          if [[ "${{ matrix.variant }}" == alpine* ]]; then
            MINOR_VERSION_BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.minor_version }}-alpine" # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3-alpine`
            PATCH_VERSION_BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.patch_version }}-alpine" # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3.6-alpine`
          elif [[ "${{ matrix.variant }}" == slim* ]]; then
            MINOR_VERSION_BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.minor_version }}-slim" # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3-slim`
            PATCH_VERSION_BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.patch_version }}-slim" # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3.6-slim`
          else
            MINOR_VERSION_BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.minor_version }}" # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3`
            PATCH_VERSION_BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.patch_version }}" # Ex: `ghcr.io/ltvco/ruby-jemalloc:3.3.6`
          fi

          echo "MINOR_VERSION_BASE_TAG=$MINOR_VERSION_BASE_TAG" >> $GITHUB_ENV
          echo "PATCH_VERSION_BASE_TAG=$PATCH_VERSION_BASE_TAG" >> $GITHUB_ENV

      # TODO: Remove the `if` condition to build for all variants (too time-consuming for testing)
      - name: Build multi-platform and push to container registry
        if: ${{ matrix.minor_version == '3.1' && matrix.variant == 'slim-bookworm' }} # For testing purposes
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.minor_version }}/${{ matrix.variant }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.MINOR_VERSION_BASE_TAG }}
            ${{ env.MINOR_VERSION_VARIANT_TAG }}
            ${{ env.PATCH_VERSION_BASE_TAG }}
            ${{ env.PATCH_VERSION_VARIANT_TAG }}
